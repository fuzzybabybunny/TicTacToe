// Generated by CoffeeScript 1.7.1
(function() {
  $(function() {
    var WIN_PATTERNS, checkForWin, clearBoard, counter, getCellNumber, getTurn, isEmpty, markCell, mixed, oTurnsRemaining, patternsToTest, resetGame, rowUnwinnable, xTurnsRemaining;
    counter = 0;
    WIN_PATTERNS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];
    mixed = /x+o+|o+x+/i;
    patternsToTest = WIN_PATTERNS.filter(function() {
      return true;
    });
    isEmpty = function(cell) {
      return !cell.text();
    };
    getCellNumber = function(cell) {
      return parseInt(cell.data('index'));
    };
    clearBoard = function() {
      $('.board-cell').text('');
      $('.board-cell').removeClass('o');
      $('.board-cell').removeClass('x');
      return counter = 0;
    };
    resetGame = function() {
      clearBoard();
      patternsToTest = WIN_PATTERNS.filter(function() {
        return true;
      });
      $('#gameboard').hide();
      return $('#start-game').fadeIn(500);
    };
    oTurnsRemaining = function() {
      return Math.floor((9 - counter) / 2);
    };
    xTurnsRemaining = function() {
      return oTurnsRemaining() + (9 - counter) % 2;
    };
    rowUnwinnable = function(row) {
      return !!row.match(mixed) || (row === 'x' && (xTurnsRemaining() < 2)) || (row === 'xx' && (xTurnsRemaining() < 1)) || (row === 'o' && (oTurnsRemaining() < 2)) || (row === 'oo' && (oTurnsRemaining() < 1)) || (row === '' && (9 - counter < 5));
    };
    checkForWin = function(cell) {
      var board, win;
      win = false;
      board = ($('.board-cell').map(function(idx, el) {
        return $(el).text();
      })).get();
      patternsToTest = patternsToTest.filter(function(p) {
        var row;
        row = "" + board[p[0]] + board[p[1]] + board[p[2]];
        win = row === 'xxx' || row === 'ooo';
        return !rowUnwinnable(row);
      });
      if (win) {
        alert(getTurn(counter - 1) + ' won!');
        return resetGame();
      } else if (patternsToTest.length < 1) {
        alert('Tie game!');
        return resetGame();
      }
    };
    getTurn = function(c) {
      if (c % 2 === 0) {
        return 'x';
      } else {
        return 'o';
      }
    };
    markCell = function(cell, mark) {
      cell.text(mark);
      cell.addClass(mark);
      counter += 1;
      if (counter > 4) {
        return checkForWin(getCellNumber(cell));
      }
    };
    $('#start-game').on('click', function(e) {
      clearBoard();
      $(this).hide();
      return $('#gameboard').fadeIn(500);
    });
    return $('.board-cell').on('click', function(e) {
      var cell, mark;
      cell = $(this);
      mark = getTurn(counter);
      if (isEmpty(cell)) {
        return markCell(cell, mark);
      }
    });
  });

}).call(this);

//# sourceMappingURL=game.map
